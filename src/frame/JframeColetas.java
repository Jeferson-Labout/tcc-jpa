/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import connection.JdbcConnection;
import entity.Rota;
import java.awt.Color;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.JasperService;
import util.Utilitarios;

/**
 *
 * @author Jefson
 */
public class JframeColetas extends javax.swing.JFrame {

    public static JframeColetas instance = null;
    Date data = new Date();
    SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");

    EntityManagerFactory emf;
    EntityManager em;

    /**
     * Creates new form JframeColetas
     */
    public JframeColetas() {
        initComponents();
        Utilitarios util = new Utilitarios();
        util.InserirIcon(this);
        util.InserirTitulo(this);
        this.radioPedente.setSelected(true);
        txtdatainicio.setEnabled(false);
        txtdatafim.setEnabled(false);
        emf = Persistence.createEntityManagerFactory("TCC_JPAPU");
        em = emf.createEntityManager();
        this.ComboBoxColetor.setSelectedIndex(-1);
        this.ComboBoxRota.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        TCC_JPAPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("TCC_JPAPU").createEntityManager();
        clienteQuery = java.beans.Beans.isDesignTime() ? null : TCC_JPAPUEntityManager.createQuery("SELECT c FROM Cliente c WHERE c.clitipocad = 3 ORDER BY c.cliid");
        clienteList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : clienteQuery.getResultList();
        rotaQuery = java.beans.Beans.isDesignTime() ? null : TCC_JPAPUEntityManager.createQuery("SELECT r FROM Rota r");
        rotaList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : rotaQuery.getResultList();
        gruporotaQuery = java.beans.Beans.isDesignTime() ? null : TCC_JPAPUEntityManager.createQuery("SELECT g FROM Gruporota g");
        gruporotaList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : gruporotaQuery.getResultList();
        jPanel1 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        radioPedente = new javax.swing.JRadioButton();
        radioConcluida = new javax.swing.JRadioButton();
        radioCancelada = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        ComboBoxColetor = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxRota = new javax.swing.JComboBox<>();
        lbl_Periodo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        txtdatainicio = new javax.swing.JFormattedTextField();
        jCheckdata = new javax.swing.JCheckBox();
        lbl_a = new javax.swing.JLabel();
        txtdatafim = new javax.swing.JFormattedTextField();
        btnGrupoColetas = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnPesquisa = new javax.swing.JButton();
        btnNovaColeta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblColetas = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        lbl = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblValorTotal = new javax.swing.JLabel();
        lblQdt = new javax.swing.JLabel();
        lblTotalColeta = new javax.swing.JLabel();
        precoRender1 = new util.PrecoRender();
        btnPesquisaMotorista = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Coletas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        radioPedente.setText("Pendente");
        radioPedente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPedenteActionPerformed(evt);
            }
        });

        radioConcluida.setText("Concluída");
        radioConcluida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioConcluidaActionPerformed(evt);
            }
        });

        radioCancelada.setText("Cancelada");
        radioCancelada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCanceladaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioConcluida)
                    .addComponent(radioCancelada)
                    .addComponent(radioPedente))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioPedente)
                .addGap(18, 18, 18)
                .addComponent(radioConcluida)
                .addGap(18, 18, 18)
                .addComponent(radioCancelada)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Cod.Coleta:");

        jLabel2.setText("Cliente:");

        jLabel3.setText("Coletor:");

        ComboBoxColetor.setEditable(true);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${resultList}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, clienteQuery, eLProperty, ComboBoxColetor);
        bindingGroup.addBinding(jComboBoxBinding);

        ComboBoxColetor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboBoxColetorKeyPressed(evt);
            }
        });

        jLabel4.setText("Rota:");

        ComboBoxRota.setEditable(true);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${resultList}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gruporotaQuery, eLProperty, ComboBoxRota);
        bindingGroup.addBinding(jComboBoxBinding);

        lbl_Periodo.setText("Período:");

        jPanel4.setForeground(new java.awt.Color(240, 240, 240));
        jPanel4.setToolTipText("");
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtdatainicio.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        try {
            txtdatainicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtdatainicio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(txtdatainicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 3, 100, 30));

        jCheckdata.setText(" ");
        jCheckdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckdataActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckdata, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 3, 25, 30));

        lbl_a.setText("à");
        jPanel4.add(lbl_a, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 8, 16, 20));

        txtdatafim.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        try {
            txtdatafim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtdatafim.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(txtdatafim, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 3, 100, 30));

        btnGrupoColetas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Grupo_32.png"))); // NOI18N
        btnGrupoColetas.setText("Grupo de Coletas");
        btnGrupoColetas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGrupoColetas.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        btnGrupoColetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrupoColetasActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Imprimir_32.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Pesquisa_32.png"))); // NOI18N
        btnPesquisa.setText("Pesquisar");
        btnPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaActionPerformed(evt);
            }
        });

        btnNovaColeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Novo_32.png"))); // NOI18N
        btnNovaColeta.setText("Nova Coleta");
        btnNovaColeta.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNovaColeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaColetaActionPerformed(evt);
            }
        });

        tblColetas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Cliente", "Motorista", "Rota", "Data da Coleta", "Quantidade", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblColetas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblColetasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblColetas);
        if (tblColetas.getColumnModel().getColumnCount() > 0) {
            tblColetas.getColumnModel().getColumn(6).setCellRenderer(precoRender1);
        }

        jLabel5.setText("Total de Coletas:");

        lbl.setText("Qdt Coletada:");

        jLabel7.setText("Valor Total:");

        lblValorTotal.setText("0");

        lblQdt.setText("0");

        lblTotalColeta.setText("0");

        precoRender1.setBorder(null);

        btnPesquisaMotorista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Pesquisa.png.png"))); // NOI18N
        btnPesquisaMotorista.setBorder(null);
        btnPesquisaMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaMotoristaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ComboBoxColetor, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(289, 289, 289)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ComboBoxRota, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(51, 51, 51)
                                                    .addComponent(btnGrupoColetas)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnImprimir)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnPesquisa)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnNovaColeta))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addComponent(lbl_Periodo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(precoRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(77, 77, 77)))))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPesquisaMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalColeta, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187)
                .addComponent(lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQdt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnGrupoColetas, btnImprimir, btnNovaColeta, btnPesquisa});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnGrupoColetas, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnImprimir)
                                .addComponent(btnPesquisa)
                                .addComponent(btnNovaColeta)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(ComboBoxRota, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(ComboBoxColetor, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(lbl_Periodo))
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(precoRender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnPesquisaMotorista))))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lbl)
                    .addComponent(jLabel7)
                    .addComponent(lblValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQdt)
                    .addComponent(lblTotalColeta))
                .addGap(27, 27, 27))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnGrupoColetas, btnImprimir, btnNovaColeta, btnPesquisa});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnPesquisaMotorista, txtCodigo, txtNome});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckdataActionPerformed
        if (jCheckdata.isSelected()) {
            this.txtdatainicio.setText(formatador.format(data));
            this.txtdatafim.setText(formatador.format(data));
            txtdatainicio.setEnabled(true);
            txtdatafim.setEnabled(true);

        } else {

            txtdatainicio.setEnabled(false);
            txtdatafim.setEnabled(false);

        }


    }//GEN-LAST:event_jCheckdataActionPerformed

    public void atualizaTabela() {
        DefaultTableModel model = (DefaultTableModel) this.tblColetas.getModel();

        String status = this.radioPedente.getText();
        if (this.radioPedente.isSelected()) {
            status = "'P'";
        } else if (this.radioConcluida.isSelected()) {
            status = "'N','M'";

        } else {

            status = "'C'";

        }
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        //faz select de todos os dados e armazena em uma lista

        List<Rota> rotas = em.createNativeQuery("SELECT *FROM Rota  WHERE rotastatus IN (" + status + ")ORDER BY rotadatacoleta", Rota.class).getResultList();
        //pega todos os contato e adiciona na tebela.
        for (int i = 0; i < rotas.size(); i++) {
            model.addRow(new Object[]{
                ((Rota) rotas.get(i)).getRotaid(),
                ((Rota) rotas.get(i)).getRotaclinome(),
                ((Rota) rotas.get(i)).getRotaclinomemotorista(),
                ((Rota) rotas.get(i)).getRotagdrdescricao(),
                new SimpleDateFormat("dd/MM/yyyy").format(((Rota) rotas.get(i)).getRotadatacoleta().getTime()),
                ((Rota) rotas.get(i)).getRotaqtde(),
                ((Rota) rotas.get(i)).getRotavalortotal()

            });

        }
        NumberFormat z = NumberFormat.getCurrencyInstance();
        double total = 0;
        for (int i = 0; i < tblColetas.getRowCount(); i++) {
            double valor = Double.parseDouble(tblColetas.getValueAt(i, 6).toString());
            total += valor;

            lblValorTotal.setText(String.valueOf(z.format(total)));

        }

        double qtdtotal = 0;
        for (int i = 0; i < tblColetas.getRowCount(); i++) {
            double qdt = Double.parseDouble(tblColetas.getValueAt(i, 5).toString());
            qtdtotal += qdt;

            lblQdt.setText(String.valueOf((qtdtotal)));

        }

        int qdt = 0;
        qdt = tblColetas.getRowCount();
        lblTotalColeta.setText(String.valueOf(qdt));
    }


    private void btnGrupoColetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrupoColetasActionPerformed
        new JframeColetasGrupo().setVisible(true);
    }//GEN-LAST:event_btnGrupoColetasActionPerformed

    private void btnNovaColetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaColetaActionPerformed

        JframeInserirColeta i = new JframeInserirColeta();
        i.btnInserir.setVisible(true);
        i.btnConcluir.setVisible(false);
        i.btnGravar.setVisible(true);
        i.lblNomeStatus.setVisible(false);
        i.lblStatus.setVisible(false);
        i.btnReativar.setVisible(false);
        i.btnCancelar.setVisible(false);

        i.setVisible(true);


    }//GEN-LAST:event_btnNovaColetaActionPerformed

    private void radioPedenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPedenteActionPerformed
        this.radioPedente.setSelected(true);
        this.radioConcluida.setSelected(false);
        this.radioCancelada.setSelected(false);
//        atualizaTabela();
    }//GEN-LAST:event_radioPedenteActionPerformed

    private void radioConcluidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioConcluidaActionPerformed
        this.radioPedente.setSelected(false);
        this.radioConcluida.setSelected(true);
        this.radioCancelada.setSelected(false);
//        atualizaTabela();
    }//GEN-LAST:event_radioConcluidaActionPerformed

    private void radioCanceladaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCanceladaActionPerformed
        this.radioPedente.setSelected(false);
        this.radioConcluida.setSelected(false);
        this.radioCancelada.setSelected(true);
//        atualizaTabela();
    }//GEN-LAST:event_radioCanceladaActionPerformed

    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed

        DefaultTableModel model = (DefaultTableModel) this.tblColetas.getModel();
        model.setRowCount(0);
        String status = this.radioPedente.getText();
        if (this.radioPedente.isSelected()) {
            status = "'P'";
        } else if (this.radioConcluida.isSelected()) {
            status = "'N','M'";

        } else {

            status = "'C'";

        }
        String codigo = txtCodigo.getText();
        String nome = txtNome.getText();
        String coletor = "";
        if (ComboBoxColetor.getSelectedIndex() != -1) {
            coletor = ComboBoxColetor.getSelectedItem().toString();
        }
        String cidade = "";
        if (ComboBoxRota.getSelectedIndex() != -1) {
            cidade = ComboBoxRota.getSelectedItem().toString();
        }

        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        if (jCheckdata.isSelected()) {
            LocalDate data_inicio = LocalDate.parse(txtdatainicio.getText(), formato);
            LocalDate data_fim = LocalDate.parse(txtdatafim.getText(), formato);
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            //faz select de todos os dados e armazena em uma lista
            String sql = "SELECT *FROM Rota  WHERE 1=1 ";
            String order = "ORDER BY rotadatacoleta";
            if (!"".equals(nome)) {
                sql += " and rotaclinome like '%" + nome + "%'";

            }
            if (!"".equals(status)) {
                sql += " and rotastatus in (" + status + ")";

            }

            if (!"".equals(codigo)) {
                sql += " and rotaid ='" + codigo + "'";

            }
            if (!"".equals(coletor)) {
                sql += " and rotaclinomemotorista ='" + coletor + "'";

            }
            if (data_inicio != null) {
                sql += " and rotadatacoleta BETWEEN '" + data_inicio + " 00:00:00.000'";

            }

            if (data_fim != null) {
                sql += " and '" + data_fim + " 23:59:59.000'";

            }
            if (!"".equals(cidade)) {
                sql += " and rotagdrdescricao = '" + cidade + "'";

            }

            List<Rota> rotas = em.createNativeQuery(sql + order, Rota.class).getResultList();
            System.out.println(sql + order);
            for (int i = 0; i < rotas.size(); i++) {
                model.addRow(new Object[]{
                    ((Rota) rotas.get(i)).getRotaid(),
                    ((Rota) rotas.get(i)).getRotaclinome(),
                    ((Rota) rotas.get(i)).getRotaclinomemotorista(),
                    ((Rota) rotas.get(i)).getRotagdrdescricao(),
                    new SimpleDateFormat("dd/MM/yyyy").format(((Rota) rotas.get(i)).getRotadatacoleta().getTime()),
                    ((Rota) rotas.get(i)).getRotaqtde(),
                    ((Rota) rotas.get(i)).getRotavalortotal()

                });

            }
          
           
        } else {
            LocalDate data_inicio = null;
            LocalDate data_fim = null;
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            //faz select de todos os dados e armazena em uma lista
            String sql = "SELECT *FROM Rota  WHERE 1=1 ";
            String order = "ORDER BY rotadatacoleta";
            if (!"".equals(nome)) {
                sql += " and rotaclinome like '%" + nome + "%'";

            }
            if (!"".equals(status)) {
                sql += " and rotastatus in (" + status + ")";

            }

            if (!"".equals(codigo)) {
                sql += " and rotaid ='" + codigo + "'";

            }
            if (!"".equals(coletor)) {
                sql += " and rotaclinomemotorista ='" + coletor + "'";

            }
            if (data_inicio != null) {
                sql += " and rotadatacoleta BETWEEN '" + data_inicio + "'";

            }

            if (data_fim != null) {
                sql += " and '" + data_fim + "'";

            }
            if (!"".equals(cidade)) {
                sql += " and rotagdrdescricao = '" + cidade + "'";

            }

            List<Rota> rotas = em.createNativeQuery(sql + order, Rota.class).getResultList();

            for (int i = 0; i < rotas.size(); i++) {
                model.addRow(new Object[]{
                    ((Rota) rotas.get(i)).getRotaid(),
                    ((Rota) rotas.get(i)).getRotaclinome(),
                    ((Rota) rotas.get(i)).getRotaclinomemotorista(),
                    ((Rota) rotas.get(i)).getRotagdrdescricao(),
                    new SimpleDateFormat("dd/MM/yyyy").format(((Rota) rotas.get(i)).getRotadatacoleta().getTime()),
                    ((Rota) rotas.get(i)).getRotaqtde(),
                    ((Rota) rotas.get(i)).getRotavalortotal()

                });

            }

        }
        NumberFormat z = NumberFormat.getCurrencyInstance();
        double total = 0;
        for (int i = 0; i < tblColetas.getRowCount(); i++) {
            double valor = Double.parseDouble(tblColetas.getValueAt(i, 6).toString());
            total += valor;

            lblValorTotal.setText(String.valueOf(z.format(total)));

        }

        double qtdtotal = 0;
        for (int i = 0; i < tblColetas.getRowCount(); i++) {
            double qdt = Double.parseDouble(tblColetas.getValueAt(i, 5).toString());
            qtdtotal += qdt;

            lblQdt.setText(String.valueOf((qtdtotal)));

        }

        int qdt = 0;
        qdt = tblColetas.getRowCount();
        lblTotalColeta.setText(String.valueOf(qdt));

    }//GEN-LAST:event_btnPesquisaActionPerformed

    private void ComboBoxColetorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboBoxColetorKeyPressed
        if (evt.getKeyCode() == evt.VK_DELETE) {
            this.ComboBoxColetor.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_ComboBoxColetorKeyPressed

    private void tblColetasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblColetasMouseClicked

        if (evt.getClickCount() == 2) {
            JframeInserirColeta recebe = new JframeInserirColeta();
            int linha = this.tblColetas.getSelectedRow();
            int id = (int) this.tblColetas.getValueAt(linha, 0);
            String status = this.radioPedente.getText();
            if (this.radioPedente.isSelected()) {
                status = "***PENDENTE***";
//                recebe.btnInserir.setVisible(false);
                recebe.btnReativar.setVisible(false);

            } else if (this.radioConcluida.isSelected()) {
                status = "***CONCLUÍDA***";
                recebe.txtCodMotorista.setEditable(false);
                recebe.txtMotorista.setEditable(false);
                recebe.btnPesquisaMotorista.setVisible(false);
                recebe.btnPesquisaVeiculo.setVisible(false);
                recebe.txtMotorista.setEditable(false);
                recebe.txtMotorista.setEditable(false);
                recebe.txtlValorFixo.setEditable(false);
                recebe.txtValorExcedente.setEditable(false);
                recebe.txtQdtContratada.setEditable(false);
                recebe.txtQdtColetada.setEditable(false);
                recebe.txtObs.setEditable(false);
                recebe.btnInserir.setVisible(false);
                recebe.btnConcluir.setVisible(false);
                recebe.btnGravar.setVisible(false);

                recebe.lblStatus.setForeground(Color.BLUE);
            } else {

                status = "*****CANCELADO*****";
                recebe.txtCodMotorista.setEditable(false);
                recebe.txtMotorista.setEditable(false);
                recebe.btnPesquisaMotorista.setVisible(false);
                recebe.btnPesquisaVeiculo.setVisible(false);
                recebe.txtMotorista.setEditable(false);
                recebe.txtMotorista.setEditable(false);
                recebe.txtlValorFixo.setEditable(false);
                recebe.txtValorExcedente.setEditable(false);
                recebe.txtQdtContratada.setEditable(false);
                recebe.txtQdtColetada.setEditable(false);
                recebe.txtObs.setEditable(false);
                recebe.lblStatus.setForeground(Color.RED);
                recebe.btnInserir.setVisible(false);
                recebe.btnConcluir.setVisible(false);
                recebe.btnGravar.setVisible(false);
                recebe.btnCancelar.setVisible(false);

            }
            recebe.setVisible(true);

            recebe.f = this;
            recebe.pack();

            List<Rota> rotas = em.createNativeQuery("SELECT * FROM rota WHERE rotaid= " + id + "", Rota.class).getResultList();
            for (Rota rota : rotas) {

                recebe.lblCodColeta.setText(rota.getRotaid().toString());
                recebe.lblCodigo.setText(rota.getRotacliid().toString());
                recebe.lblRazao.setText(rota.getRotaclinome());
                recebe.lblFantasia.setText(rota.getRotaclifantasia());
                recebe.lblCPF.setText(rota.getRotaclicpfcgc());
                recebe.lblCidade.setText(rota.getRotaclicidade());
                recebe.txtObs.setText(rota.getRotaobservacao());
                recebe.lblRespnsavel.setText(rota.getRotaresponsavel());
                recebe.lblUF.setText(rota.getRotacliuf());
                recebe.lblBairo.setText(rota.getRotaclibairro());
                recebe.lblEndereco.setText(rota.getRotacliendereco());
                recebe.lblFone.setText(rota.getRotaclifone());
                recebe.lblLatitude.setText(rota.getRotaclilatitude());
                recebe.lblLongitude.setText(rota.getRotaclilongitude());
                String dataF = (rota.getRotadata().toString());
                recebe.lblData.setText(formatador.format(rota.getRotadatacoleta()));

                recebe.lblStatus.setText(status);

                recebe.txtQdtColetada.setText(rota.getRotaqtde().toString());
                recebe.lblNumero.setText(rota.getRotaclinumero());
                recebe.lblrotaID.setText(rota.getRotagdrid().toString());
                recebe.lblRotaDescricao.setText(rota.getRotagdrdescricao());
                recebe.lblEmail.setText(rota.getRotacliemail());
                recebe.txtlValorFixo.setText(rota.getRotavalorfixo().toString());
                recebe.txtValorExcedente.setText(rota.getRotavalorexcedente().toString());
                recebe.txtQdtContratada.setText(rota.getRotacliqtdecontratada().toString());
                recebe.lblTotal.setText(rota.getRotavalortotal().toString());

                recebe.lblQdtExcedente.setText(rota.getRotaqtdeexcedente().toString());
                recebe.txtCodMotorista.setText(rota.getRotacliidmotorista().toString());
                recebe.txtMotorista.setText(rota.getRotaclinomemotorista());
                recebe.txtCodVeiculo.setText(rota.getRotaveiid().toString());
                recebe.txtVeiculo.setText(rota.getRotaveiplaca());
                recebe.lblmodelo.setText(rota.getRotaveimodelo());
                recebe.txtObs.setText(rota.getRotaobservacao());
                recebe.lblRespnsavel.setText(rota.getRotaresponsavel());

            }
        }
    }//GEN-LAST:event_tblColetasMouseClicked
    private void abrirJrxml(String numero) throws ParseException {

        String status1 = "P";
        String status2 = "M";
        String status3 = "N";
        String status4 = "C";
        ArrayList<String> status = new ArrayList<>();

        if (this.radioPedente.isSelected()) {

            status.add(status1);
        } else if (this.radioConcluida.isSelected()) {

            status.add(status2);
            status.add(status3);

        } else {
            status.add(status4);

        }

        String codigo = txtCodigo.getText();

        String nome = txtNome.getText();
        String coletor = "";
        if (ComboBoxColetor.getSelectedIndex() != -1) {
            coletor = ComboBoxColetor.getSelectedItem().toString();
        }
        String cidade = "";
        if (ComboBoxRota.getSelectedIndex() != -1) {
            cidade = ComboBoxRota.getSelectedItem().toString();
        }

        DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        java.util.Date data_inicio = null;
        java.util.Date data_fim = null;
        java.util.Date data1 = null;
        java.util.Date data2 = null;

        if (jCheckdata.isSelected()) {
            data_inicio = (java.util.Date) formatter.parse(txtdatainicio.getText());
            data_fim = (java.util.Date) formatter.parse(txtdatafim.getText());
            java.sql.Date data_inicio_Sql = new java.sql.Date(data_inicio.getTime());
            java.sql.Date data_fim_Sql = new java.sql.Date(data_fim.getTime());
            //faz select de todos os dados e armazena em uma lista
            Connection connection = JdbcConnection.connection();
            JasperService service = new JasperService();
            if (!"".equals(nome)) {
                service.addParams("CLIENTENOME", nome);

            }

            if (!"".equals(status)) {
                service.addParams("STATUS", status);

            }

            if (!"".equals(codigo)) {
                JOptionPane.showMessageDialog(this, "O Campo Cod.Coleta não é parametro de Relatorio");

            }
            if (!"".equals(coletor)) {
                service.addParams("MOTORISTA", ComboBoxColetor.getSelectedItem().toString());

            }
            if (data_inicio != null) {
                service.addParams("DATACOLETAINICIO", data_inicio_Sql);

            }

            if (data_fim != null) {
                service.addParams("DATACOLETAFINAL", data_fim_Sql);

            }
            if (!"".equals(cidade)) {
                service.addParams("CIDADE", ComboBoxRota.getSelectedItem().toString());

            }

            service.abrirJasperViewer("relatorios/Coletas-" + numero + ".jrxml", connection);

        } else {

            //faz select de todos os dados e armazena em uma lista
            Connection connection = JdbcConnection.connection();
            JasperService service = new JasperService();
            if (!"".equals(nome)) {
                service.addParams("CLIENTENOME", nome);

            }
            if (!"".equals(status)) {
                service.addParams("STATUS", status);

            }

            if (!"".equals(codigo)) {
                JOptionPane.showMessageDialog(this, "O Campo Cod.Coleta não é parametro de Relatorio");

            }
            if (!"".equals(coletor)) {
                service.addParams("MOTORISTA", ComboBoxColetor.getSelectedItem().toString());

            }
            if (data_inicio != null) {
                service.addParams("DATACOLETAINICIO", data_inicio);

            }

            if (data_fim != null) {
                service.addParams("DATACOLETAFINAL", data_fim);

            }
            if (!"".equals(cidade)) {
                service.addParams("CIDADE", ComboBoxRota.getSelectedItem().toString());

            }

            service.abrirJasperViewer("relatorios/Coletas-" + numero + ".jrxml", connection);
        }
    }

    private void abrirPontoJasper(String numero) throws ParseException {

        String status1 = "P";
        String status2 = "M";
        String status3 = "N";
        String status4 = "C";
        ArrayList<String> status = new ArrayList<>();

        if (this.radioPedente.isSelected()) {

            status.add(status1);
        } else if (this.radioConcluida.isSelected()) {

            status.add(status2);
            status.add(status3);

        } else {
            status.add(status4);

        }

        String codigo = txtCodigo.getText();

        String nome = txtNome.getText();
        String coletor = "";
        if (ComboBoxColetor.getSelectedIndex() != -1) {
            coletor = ComboBoxColetor.getSelectedItem().toString();
        }
        String cidade = "";
        if (ComboBoxRota.getSelectedIndex() != -1) {
            cidade = ComboBoxRota.getSelectedItem().toString();
        }

        DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss.SSS");
        java.util.Date data_inicio = null;
        java.util.Date data_fim = null;

        if (jCheckdata.isSelected()) {
            data_inicio = (java.util.Date) formatter.parse(txtdatainicio.getText() + " 00:00:00.000");
            data_fim = (java.util.Date) formatter.parse(txtdatafim.getText() + " 23:59:59.000");

            java.sql.Timestamp data_inicio_Sql = new java.sql.Timestamp(data_inicio.getTime());
            java.sql.Timestamp data_fim_Sql = new java.sql.Timestamp(data_fim.getTime());

            //faz select de todos os dados e armazena em uma lista
            Connection connection = JdbcConnection.connection();
            JasperService service = new JasperService();
            if (!"".equals(nome)) {
                service.addParams("CLIENTENOME", nome);

            }

            if (!"".equals(status)) {
                service.addParams("STATUS", status);

            }

            if (!"".equals(codigo)) {
                JOptionPane.showMessageDialog(this, "O Campo Cod.Coleta não é parametro de Relatorio");

            }
            if (!"".equals(coletor)) {
                service.addParams("MOTORISTA", ComboBoxColetor.getSelectedItem().toString());

            }
            if (data_inicio != null) {
                service.addParams("DATACOLETAINICIO", data_inicio_Sql);

            }

            if (data_fim != null) {
                service.addParams("DATACOLETAFINAL", data_fim_Sql);

            }
            if (!"".equals(cidade)) {
                service.addParams("CIDADE", ComboBoxRota.getSelectedItem().toString());

            }

            service.abrirPontoJasper("relatorios/Coletas-" + numero + ".jasper", connection);

        } else {

            //faz select de todos os dados e armazena em uma lista
            Connection connection = JdbcConnection.connection();
            JasperService service = new JasperService();
            if (!"".equals(nome)) {
                service.addParams("CLIENTENOME", nome);

            }
            if (!"".equals(status)) {
                service.addParams("STATUS", status);

            }

            if (!"".equals(codigo)) {
                JOptionPane.showMessageDialog(this, "O Campo Cod.Coleta não é parametro de Relatorio");

            }
            if (!"".equals(coletor)) {
                service.addParams("MOTORISTA", ComboBoxColetor.getSelectedItem().toString());

            }
            if (data_inicio != null) {
                service.addParams("DATACOLETAINICIO", data_inicio);

            }

            if (data_fim != null) {
                service.addParams("DATACOLETAFINAL", data_fim);

            }
            if (!"".equals(cidade)) {
                service.addParams("CIDADE", ComboBoxRota.getSelectedItem().toString());

            }

            service.abrirPontoJasper("relatorios/Coletas-" + numero + ".jasper", connection);
        }
    }
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma a Impressão do Relatório", "Atenção", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {
            try {
//                abrirJrxml("04");
                abrirPontoJasper("04");
            } catch (ParseException ex) {
                Logger.getLogger(JframeColetas.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnPesquisaMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaMotoristaActionPerformed
        JframeListaClientes_Lista cliente = new JframeListaClientes_Lista();
        cliente.setVisible(true);
        cliente.c = this;
        cliente.pack();
    }//GEN-LAST:event_btnPesquisaMotoristaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JframeColetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JframeColetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JframeColetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JframeColetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JframeColetas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxColetor;
    private javax.swing.JComboBox<String> ComboBoxRota;
    private javax.persistence.EntityManager TCC_JPAPUEntityManager;
    private javax.swing.JButton btnGrupoColetas;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNovaColeta;
    public javax.swing.JButton btnPesquisa;
    public javax.swing.JButton btnPesquisaMotorista;
    private java.util.List<entity.Cliente> clienteList;
    private javax.persistence.Query clienteQuery;
    private java.util.List<entity.Gruporota> gruporotaList;
    private javax.persistence.Query gruporotaQuery;
    private javax.swing.JCheckBox jCheckdata;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lblQdt;
    private javax.swing.JLabel lblTotalColeta;
    private javax.swing.JLabel lblValorTotal;
    private javax.swing.JLabel lbl_Periodo;
    private javax.swing.JLabel lbl_a;
    private util.PrecoRender precoRender1;
    private javax.swing.JRadioButton radioCancelada;
    private javax.swing.JRadioButton radioConcluida;
    private javax.swing.JRadioButton radioPedente;
    private java.util.List<entity.Rota> rotaList;
    private javax.persistence.Query rotaQuery;
    public javax.swing.JTable tblColetas;
    private javax.swing.JTextField txtCodigo;
    public javax.swing.JTextField txtNome;
    private javax.swing.JFormattedTextField txtdatafim;
    private javax.swing.JFormattedTextField txtdatainicio;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
